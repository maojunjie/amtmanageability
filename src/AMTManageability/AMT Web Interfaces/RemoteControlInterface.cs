//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="RemoteControlSoapBinding", Namespace="http://schemas.intel.com/platform/client/RemoteControl/2004/01")]
public partial class RemoteControlService : System.Web.Services.Protocols.SoapHttpClientProtocol {

    // This method is customized code - Not auto generated
    protected new object[] Invoke(string methodName, object[] parameters)
    {
        bool skip = false;
        object[] ret = null;

     //   IAMTRemoteStack.AmtDebugForm.LogWebCall(this.Url, methodName, parameters, ret);

        try { ret = base.Invoke(methodName, parameters); skip = true; }
        catch (System.Net.WebException)
        {
            //IAMTRemoteStack.AmtDebugForm.LogEvent(this, IAMTRemoteStack.AmtDebugForm.EventType.CallWarning, methodName);
        }

        if (!skip)
        {
            try { ret = base.Invoke(methodName, parameters); skip = true; }
            catch (System.Net.WebException ex)
            {
               // IAMTRemoteStack.AmtDebugForm.LogEvent(this, IAMTRemoteStack.AmtDebugForm.EventType.CallFailed, methodName);
              //  IAMTRemoteStack.AmtDebugForm.LogException(this, ex);
            }
        }

        if (!skip)
        {
            ret = base.Invoke(methodName, parameters);
        }

       // IAMTRemoteStack.AmtDebugForm.LogWebCall(this.Url, methodName, parameters, ret);
        return ret;
    }

    private System.Threading.SendOrPostCallback GetRemoteControlCapabilitiesOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoteControlOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSystemPowerStateOperationCompleted;
    
    /// <remarks/>
    public RemoteControlService(string hostnameAndPort) {
        this.Url = "http://" + hostnameAndPort  +"/RemoteControlService";
    }
    
    /// <remarks/>
    public event GetRemoteControlCapabilitiesCompletedEventHandler GetRemoteControlCapabilitiesCompleted;
    
    /// <remarks/>
    public event RemoteControlCompletedEventHandler RemoteControlCompleted;
    
    /// <remarks/>
    public event GetSystemPowerStateCompletedEventHandler GetSystemPowerStateCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.intel.com/platform/client/RemoteControl/2004/01/GetRemoteControlCa" +
        "pabilities", RequestNamespace="http://schemas.intel.com/platform/client/RemoteControl/2004/01", ResponseNamespace="http://schemas.intel.com/platform/client/RemoteControl/2004/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("Status")]
    public uint GetRemoteControlCapabilities(out uint IanaOemNumber, out uint OemDefinedCapabilities, out ushort SpecialCommandsSupported, out byte SystemCapabilitiesSupported, out uint SystemFirmwareCapabilities) {
        object[] results = this.Invoke("GetRemoteControlCapabilities", new object[0]);
        IanaOemNumber = ((uint)(results[1]));
        OemDefinedCapabilities = ((uint)(results[2]));
        SpecialCommandsSupported = ((ushort)(results[3]));
        SystemCapabilitiesSupported = ((byte)(results[4]));
        SystemFirmwareCapabilities = ((uint)(results[5]));
        return ((uint)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRemoteControlCapabilities(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRemoteControlCapabilities", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public uint EndGetRemoteControlCapabilities(System.IAsyncResult asyncResult, out uint IanaOemNumber, out uint OemDefinedCapabilities, out ushort SpecialCommandsSupported, out byte SystemCapabilitiesSupported, out uint SystemFirmwareCapabilities) {
        object[] results = this.EndInvoke(asyncResult);
        IanaOemNumber = ((uint)(results[1]));
        OemDefinedCapabilities = ((uint)(results[2]));
        SpecialCommandsSupported = ((ushort)(results[3]));
        SystemCapabilitiesSupported = ((byte)(results[4]));
        SystemFirmwareCapabilities = ((uint)(results[5]));
        return ((uint)(results[0]));
    }
    
    /// <remarks/>
    public void GetRemoteControlCapabilitiesAsync() {
        this.GetRemoteControlCapabilitiesAsync(null);
    }
    
    /// <remarks/>
    public void GetRemoteControlCapabilitiesAsync(object userState) {
        if ((this.GetRemoteControlCapabilitiesOperationCompleted == null)) {
            this.GetRemoteControlCapabilitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteControlCapabilitiesOperationCompleted);
        }
        this.InvokeAsync("GetRemoteControlCapabilities", new object[0], this.GetRemoteControlCapabilitiesOperationCompleted, userState);
    }
    
    private void OnGetRemoteControlCapabilitiesOperationCompleted(object arg) {
        if ((this.GetRemoteControlCapabilitiesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRemoteControlCapabilitiesCompleted(this, new GetRemoteControlCapabilitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.intel.com/platform/client/RemoteControl/2004/01/RemoteControl", RequestNamespace="http://schemas.intel.com/platform/client/RemoteControl/2004/01", ResponseNamespace="http://schemas.intel.com/platform/client/RemoteControl/2004/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("Status")]
    public uint RemoteControl(byte Command, uint IanaOemNumber, byte SpecialCommand, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SpecialCommandSpecified, ushort SpecialCommandParameter, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SpecialCommandParameterSpecified, ushort BootOptions, [System.Xml.Serialization.XmlIgnoreAttribute()] bool BootOptionsSpecified, ushort OEMparameters, [System.Xml.Serialization.XmlIgnoreAttribute()] bool OEMparametersSpecified) {
        object[] results = this.Invoke("RemoteControl", new object[] {
                    Command,
                    IanaOemNumber,
                    SpecialCommand,
                    SpecialCommandSpecified,
                    SpecialCommandParameter,
                    SpecialCommandParameterSpecified,
                    BootOptions,
                    BootOptionsSpecified,
                    OEMparameters,
                    OEMparametersSpecified});
        return ((uint)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoteControl(byte Command, uint IanaOemNumber, byte SpecialCommand, bool SpecialCommandSpecified, ushort SpecialCommandParameter, bool SpecialCommandParameterSpecified, ushort BootOptions, bool BootOptionsSpecified, ushort OEMparameters, bool OEMparametersSpecified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoteControl", new object[] {
                    Command,
                    IanaOemNumber,
                    SpecialCommand,
                    SpecialCommandSpecified,
                    SpecialCommandParameter,
                    SpecialCommandParameterSpecified,
                    BootOptions,
                    BootOptionsSpecified,
                    OEMparameters,
                    OEMparametersSpecified}, callback, asyncState);
    }
    
    /// <remarks/>
    public uint EndRemoteControl(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((uint)(results[0]));
    }
    
    /// <remarks/>
    public void RemoteControlAsync(byte Command, uint IanaOemNumber, byte SpecialCommand, bool SpecialCommandSpecified, ushort SpecialCommandParameter, bool SpecialCommandParameterSpecified, ushort BootOptions, bool BootOptionsSpecified, ushort OEMparameters, bool OEMparametersSpecified) {
        this.RemoteControlAsync(Command, IanaOemNumber, SpecialCommand, SpecialCommandSpecified, SpecialCommandParameter, SpecialCommandParameterSpecified, BootOptions, BootOptionsSpecified, OEMparameters, OEMparametersSpecified, null);
    }
    
    /// <remarks/>
    public void RemoteControlAsync(byte Command, uint IanaOemNumber, byte SpecialCommand, bool SpecialCommandSpecified, ushort SpecialCommandParameter, bool SpecialCommandParameterSpecified, ushort BootOptions, bool BootOptionsSpecified, ushort OEMparameters, bool OEMparametersSpecified, object userState) {
        if ((this.RemoteControlOperationCompleted == null)) {
            this.RemoteControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteControlOperationCompleted);
        }
        this.InvokeAsync("RemoteControl", new object[] {
                    Command,
                    IanaOemNumber,
                    SpecialCommand,
                    SpecialCommandSpecified,
                    SpecialCommandParameter,
                    SpecialCommandParameterSpecified,
                    BootOptions,
                    BootOptionsSpecified,
                    OEMparameters,
                    OEMparametersSpecified}, this.RemoteControlOperationCompleted, userState);
    }
    
    private void OnRemoteControlOperationCompleted(object arg) {
        if ((this.RemoteControlCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoteControlCompleted(this, new RemoteControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.intel.com/platform/client/RemoteControl/2004/01/GetSystemPowerStat" +
        "e", RequestNamespace="http://schemas.intel.com/platform/client/RemoteControl/2004/01", ResponseNamespace="http://schemas.intel.com/platform/client/RemoteControl/2004/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("Status")]
    public uint GetSystemPowerState(out uint SystemPowerState) {
        object[] results = this.Invoke("GetSystemPowerState", new object[0]);
        SystemPowerState = ((uint)(results[1]));
        return ((uint)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSystemPowerState(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemPowerState", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public uint EndGetSystemPowerState(System.IAsyncResult asyncResult, out uint SystemPowerState) {
        object[] results = this.EndInvoke(asyncResult);
        SystemPowerState = ((uint)(results[1]));
        return ((uint)(results[0]));
    }
    
    /// <remarks/>
    public void GetSystemPowerStateAsync() {
        this.GetSystemPowerStateAsync(null);
    }
    
    /// <remarks/>
    public void GetSystemPowerStateAsync(object userState) {
        if ((this.GetSystemPowerStateOperationCompleted == null)) {
            this.GetSystemPowerStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemPowerStateOperationCompleted);
        }
        this.InvokeAsync("GetSystemPowerState", new object[0], this.GetSystemPowerStateOperationCompleted, userState);
    }
    
    private void OnGetSystemPowerStateOperationCompleted(object arg) {
        if ((this.GetSystemPowerStateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSystemPowerStateCompleted(this, new GetSystemPowerStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetRemoteControlCapabilitiesCompletedEventHandler(object sender, GetRemoteControlCapabilitiesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRemoteControlCapabilitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRemoteControlCapabilitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public uint Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public uint IanaOemNumber {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public uint OemDefinedCapabilities {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public ushort SpecialCommandsSupported {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ushort)(this.results[3]));
        }
    }
    
    /// <remarks/>
    public byte SystemCapabilitiesSupported {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte)(this.results[4]));
        }
    }
    
    /// <remarks/>
    public uint SystemFirmwareCapabilities {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[5]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void RemoteControlCompletedEventHandler(object sender, RemoteControlCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RemoteControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RemoteControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public uint Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetSystemPowerStateCompletedEventHandler(object sender, GetSystemPowerStateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSystemPowerStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSystemPowerStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public uint Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public uint SystemPowerState {
        get {
            this.RaiseExceptionIfNecessary();
            return ((uint)(this.results[1]));
        }
    }
}
